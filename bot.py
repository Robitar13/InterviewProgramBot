import telebot
import json
import os
import random

TOKEN = os.getenv("TELEGRAM_TOKEN")  # –ò–ª–∏ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—à—å –ª–æ–∫–∞–ª—å–Ω–æ
bot = telebot.TeleBot(8162107934:AAFI7VCgfRZjBCwAOsZK_2SE-TvqQDwgkFY)

DATA_DIR = "data"
SESSIONS_FILE = "user_sessions.json"
QUESTIONS_PER_TEST = 25

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π
if os.path.exists(SESSIONS_FILE):
    with open(SESSIONS_FILE, "r", encoding="utf-8") as f:
        user_sessions = json.load(f)
else:
    user_sessions = {}

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@bot.message_handler(commands=["start"])
def start(message):
    chat_id = str(message.chat.id)
    user_sessions[chat_id] = {
        "role": None,
        "questions": [],
        "used_questions": [],
        "step": 0,
        "score": 0
    }

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for file in os.listdir(DATA_DIR):
        if file.endswith(".json"):
            name = file.replace(".json", "").capitalize()
            markup.add(name)

    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:", reply_markup=markup)


# --- –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
@bot.message_handler(func=lambda msg: msg.text.lower() in [f.replace(".json", "") for f in os.listdir(DATA_DIR)])
def handle_role_selection(message):
    chat_id = str(message.chat.id)
    role = message.text.lower()
    filepath = os.path.join(DATA_DIR, f"{role}.json")

    with open(filepath, "r", encoding="utf-8") as f:
        all_questions = json.load(f)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
    used = user_sessions[chat_id]["used_questions"]
    available = [q for q in all_questions if q["question"] not in used]

    if len(available) < QUESTIONS_PER_TEST:
        # –ï—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        available = all_questions
        user_sessions[chat_id]["used_questions"] = []

    selected = random.sample(available, QUESTIONS_PER_TEST)

    user_sessions[chat_id].update({
        "role": role,
        "questions": selected,
        "step": 0,
        "score": 0
    })

    ask_question(chat_id)


# --- –ó–∞–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ---
def ask_question(chat_id):
    session = user_sessions[chat_id]
    step = session["step"]

    if step >= len(session["questions"]):
        return finish_test(chat_id)

    q = session["questions"][step]
    options_text = "\n".join([f"{chr(65+i)}) {opt}" for i, opt in enumerate(q["options"])])
    question_text = f"‚ùì –í–æ–ø—Ä–æ—Å {step+1}/{QUESTIONS_PER_TEST}:\n<b>{q['question']}</b>\n\n{options_text}"

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in range(len(q["options"])):
        markup.add(chr(65+i))

    bot.send_message(chat_id, question_text, parse_mode="HTML", reply_markup=markup)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ ---
@bot.message_handler(func=lambda msg: msg.text.upper() in ["A", "B", "C", "D", "E"])
def handle_answer(message):
    chat_id = str(message.chat.id)
    session = user_sessions.get(chat_id)

    if not session:
        return bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start")

    step = session["step"]
    q = session["questions"][step]
    correct_index = q["answer"]
    correct_letter = chr(65 + correct_index)

    if message.text.upper() == correct_letter:
        bot.send_message(chat_id, "‚úÖ –í–µ—Ä–Ω–æ!")
        session["score"] += 1
    else:
        correct_answer_text = q["options"][correct_index]
        bot.send_message(chat_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_letter}) {correct_answer_text}")

    session["used_questions"].append(q["question"])
    session["step"] += 1
    ask_question(chat_id)


# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ ---
def finish_test(chat_id):
    session = user_sessions[chat_id]
    total = len(session["questions"])
    score = session["score"]
    percent = round((score / total) * 100)

    if percent >= 80:
        feedback = "üéâ –¢—ã –±—ã —Ç–æ—á–Ω–æ –ø—Ä–æ—à—ë–ª —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!"
    elif percent >= 50:
        feedback = "üßê –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–µ–¥–Ω–∏–π, –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏."
    else:
        feedback = "üòï –ü–æ–∫–∞ –Ω–µ –ø—Ä–æ—à—ë–ª –±—ã. –ù–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!"

    bot.send_message(chat_id, f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total} ({percent}%)\n{feedback}")
    bot.send_message(chat_id, "–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑? –ù–∞–ø–∏—à–∏ /start")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏–∏
    with open(SESSIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_sessions, f, ensure_ascii=False, indent=2)


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
bot.polling()
